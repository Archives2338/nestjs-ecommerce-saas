const mongoose = require('mongoose');

console.log('üîç Conectando a MongoDB (ecommerce-db)...');
mongoose.connect('mongodb://localhost:27017/ecommerce-db')
  .then(async () => {
    console.log('‚úÖ Conectado a MongoDB');
    
    // Consultar cat√°logo
    const Catalog = mongoose.model('Catalog', new mongoose.Schema({}, { strict: false }));
    const catalog = await Catalog.findOne({ language: 'es' });
    
    if (!catalog) {
      console.log('‚ùå No se encontr√≥ cat√°logo en espa√±ol');
      await mongoose.disconnect();
      return;
    }
    
    console.log('üìã CAT√ÅLOGO ENCONTRADO:');
    console.log('Language:', catalog.language);
    console.log('Total categor√≠as:', catalog.list.length);
    console.log('='.repeat(60));
    
    let totalServicesInCatalog = 0;
    catalog.list.forEach((category, catIndex) => {
      console.log(`\nüè∑Ô∏è Categor√≠a ${catIndex + 1}: ${category.id} - ${category.type_name}`);
      console.log(`   üì¶ Servicios en esta categor√≠a: ${category.spuList.length}`);
      
      category.spuList.forEach((spu, spuIndex) => {
        totalServicesInCatalog++;
        console.log(`     ${spuIndex + 1}. üìã ID: ${spu.id}`);
        console.log(`        üè∑Ô∏è Name: ${spu.type_name}`);
        console.log(`        üí∞ Price: ${spu.min_price || 'No price'}`);
        console.log(`        üîó ServiceRef: ${spu.serviceRef || 'NO_REF'}`);
        console.log('        ' + '-'.repeat(40));
      });
    });
    
    console.log(`\nüìä RESUMEN:`);
    console.log(`   üî¢ TOTAL SERVICIOS EN CAT√ÅLOGO: ${totalServicesInCatalog}`);
    console.log(`   üéØ SERVICIOS REALES EN DB: 1 (type_id: 1)`);
    console.log(`   ‚ö†Ô∏è DIFERENCIA: ${totalServicesInCatalog - 1} servicios hu√©rfanos`);
    
    await mongoose.disconnect();
    console.log('‚úÖ Desconectado de MongoDB');
  })
  .catch(err => {
    console.error('‚ùå Error:', err);
    process.exit(1);
  });
