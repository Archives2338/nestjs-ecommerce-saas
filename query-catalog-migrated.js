const mongoose = require('mongoose');

console.log('üîç Conectando a MongoDB (ecommerce-db)...');
mongoose.connect('mongodb://localhost:27017/ecommerce-db')
  .then(async () => {
    console.log('‚úÖ Conectado a MongoDB');
    
    // Consultar cat√°logo con nuevo formato
    const Catalog = mongoose.model('Catalog', new mongoose.Schema({}, { strict: false }));
    const catalog = await Catalog.findOne({ language: 'es' });
    
    if (!catalog) {
      console.log('‚ùå No se encontr√≥ cat√°logo en espa√±ol');
      await mongoose.disconnect();
      return;
    }
    
    console.log('üìã CAT√ÅLOGO POST-MIGRACI√ìN:');
    console.log('Language:', catalog.language);
    console.log('Total categor√≠as:', catalog.list.length);
    console.log('='.repeat(60));
    
    let totalServicesInCatalog = 0;
    catalog.list.forEach((category, catIndex) => {
      console.log(`\nüè∑Ô∏è Categor√≠a ${catIndex + 1}: ${category.id} - ${category.type_name}`);
      console.log(`   üì¶ Servicios en esta categor√≠a: ${category.spuList.length}`);
      
      category.spuList.forEach((spu, spuIndex) => {
        totalServicesInCatalog++;
        console.log(`     ${spuIndex + 1}. üÜî serviceId: ${spu.serviceId || 'N/A'}`);
        console.log(`        üìã type_id: ${spu.type_id || spu.id || 'N/A'}`);
        console.log(`        üè∑Ô∏è Name: ${spu.type_name}`);
        console.log(`        üí∞ Price: ${spu.min_price || 'No price'}`);
        console.log(`        üîó serviceRef: ${spu.serviceRef || 'N/A'}`);
        console.log(`        üìä Status: ${spu.serviceId ? '‚úÖ Migrado' : '‚ùå No migrado'}`);
        console.log('        ' + '-'.repeat(40));
      });
    });
    
    console.log(`\nüìä RESUMEN POST-MIGRACI√ìN:`);
    console.log(`   üî¢ TOTAL SERVICIOS EN CAT√ÅLOGO: ${totalServicesInCatalog}`);
    
    // Contar servicios migrados vs no migrados
    let migrated = 0;
    let notMigrated = 0;
    catalog.list.forEach(category => {
      category.spuList.forEach(spu => {
        if (spu.serviceId) {
          migrated++;
        } else {
          notMigrated++;
        }
      });
    });
    
    console.log(`   ‚úÖ SERVICIOS MIGRADOS (con serviceId): ${migrated}`);
    console.log(`   ‚ùå SERVICIOS NO MIGRADOS (sin serviceId): ${notMigrated}`);
    console.log(`   üìà √âXITO DE MIGRACI√ìN: ${((migrated / totalServicesInCatalog) * 100).toFixed(1)}%`);
    
    await mongoose.disconnect();
    console.log('‚úÖ Desconectado de MongoDB');
  })
  .catch(err => {
    console.error('‚ùå Error:', err);
    process.exit(1);
  });
